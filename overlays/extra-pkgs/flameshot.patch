diff --git a/src/core/flameshot.cpp b/src/core/flameshot.cpp
index 54b0ada4..56d476c7 100644
--- a/src/core/flameshot.cpp
+++ b/src/core/flameshot.cpp
@@ -123,8 +123,7 @@ CaptureWidget* Flameshot::gui(const CaptureRequest& req)
         m_captureWindow->activateWindow();
         m_captureWindow->raise();
 #else
-        m_captureWindow->showFullScreen();
-//        m_captureWindow->show(); // For CaptureWidget Debugging under Linux
+       m_captureWindow->show(); // For CaptureWidget Debugging under Linux
 #endif
         return m_captureWindow;
     } else {
diff --git a/src/tools/pin/pinwidget.cpp b/src/tools/pin/pinwidget.cpp
index a315b4c0..a9d6121e 100644
--- a/src/tools/pin/pinwidget.cpp
+++ b/src/tools/pin/pinwidget.cpp
@@ -51,28 +51,25 @@ PinWidget::PinWidget(const QPixmap& pixmap,
     setGraphicsEffect(m_shadowEffect);
     setWindowOpacity(m_opacity);
 
+    qreal devicePixelRatio = 1;
+    QScreen* currentScreen = QGuiAppCurrentScreen().currentScreen();
+    if (currentScreen != nullptr) {
+        devicePixelRatio = currentScreen->devicePixelRatio();
+    }
+
     m_label->setPixmap(m_pixmap);
     m_layout->addWidget(m_label);
 
     new QShortcut(QKeySequence(Qt::CTRL + Qt::Key_Q), this, SLOT(close()));
     new QShortcut(Qt::Key_Escape, this, SLOT(close()));
 
-    qreal devicePixelRatio = 1;
-#if defined(Q_OS_MACOS)
-    QScreen* currentScreen = QGuiAppCurrentScreen().currentScreen();
-    if (currentScreen != nullptr) {
-        devicePixelRatio = currentScreen->devicePixelRatio();
-    }
-#endif
     const int margin =
-      static_cast<int>(static_cast<double>(MARGIN) * devicePixelRatio);
-    QRect adjusted_pos = geometry + QMargins(margin, margin, margin, margin);
-    setGeometry(adjusted_pos);
+      static_cast<int>(static_cast<double>(MARGIN) / devicePixelRatio);
+    QRect adjusted_pos = QRect(50, 890, m_pixmap.width() / devicePixelRatio, m_pixmap.height() / devicePixelRatio) + QMargins(margin, margin, margin, margin);
 #if defined(Q_OS_LINUX)
     setWindowFlags(Qt::X11BypassWindowManagerHint);
 #endif
 
-#if defined(Q_OS_MACOS)
     if (currentScreen != nullptr) {
         QPoint topLeft = currentScreen->geometry().topLeft();
         adjusted_pos.setX((adjusted_pos.x() - topLeft.x()) / devicePixelRatio +
@@ -82,10 +79,8 @@ PinWidget::PinWidget(const QPixmap& pixmap,
                           topLeft.y());
         adjusted_pos.setWidth(adjusted_pos.size().width() / devicePixelRatio);
         adjusted_pos.setHeight(adjusted_pos.size().height() / devicePixelRatio);
-        resize(0, 0);
-        move(adjusted_pos.x(), adjusted_pos.y());
+      setGeometry(adjusted_pos);
     }
-#endif
     grabGesture(Qt::PinchGesture);
 
     this->setContextMenuPolicy(Qt::CustomContextMenu);
diff --git a/src/widgets/capture/capturewidget.cpp b/src/widgets/capture/capturewidget.cpp
index 49ebff97..ba7399d2 100644
--- a/src/widgets/capture/capturewidget.cpp
+++ b/src/widgets/capture/capturewidget.cpp
@@ -152,7 +152,7 @@ CaptureWidget::CaptureWidget(const CaptureRequest& req,
 #else
 // Call cmake with -DFLAMESHOT_DEBUG_CAPTURE=ON to enable easier debugging
 #if !defined(FLAMESHOT_DEBUG_CAPTURE)
-        setWindowFlags(Qt::BypassWindowManagerHint | Qt::WindowStaysOnTopHint |
+        setWindowFlags( Qt::WindowStaysOnTopHint |
                        Qt::FramelessWindowHint | Qt::Tool);
         resize(pixmap().size());
 #endif
